 
# <!--- from system class -->
 # def list_vulns
	# 	return get_valid("vulns", Conf.vulnerabilities, "type")
	# end

 #    def list_networks
 #        return get_valid("networks", Conf.networks, "name")
 #    end

 #    def get_valid(id, valid_items, key)
 #        known_item = []

 #        @data[id].each do |item|
 #            # boolean to check if valid type matches vuln type etc
 #            valid_items.each do |valid|
 #                if item.send(key) == valid.send(key)
 #                    known_item << item
 #                    break
 #                end
 #            end
 #        end
 #        return known_item
 #    end
 # <!---- end --->

 # def create_solution(system_xml, base_xml, vulns_xml,network_xml)

#     known_boxes = list_known_base_boxes(system_xml, base_xml)
#     known_vulns = list_known_vulnerabilities(vulns_xml,system_xml)
#     known_networks = list_there_known_networks(network_xml,system_xml)
#     #create_vagrant_file(known_boxes,known_vulns,known_networks) 
# end

# def list_known_base_boxes(system_xml, base_xml)
#   boxes_with_known_bases = []

#   system_xml.each { |s|
#     base_xml.each { |b|
#       if b[:base] == s[:base] 
#         boxes_with_known_bases << s
#       break
#     end
#     }
#   }
#   return boxes_with_known_bases
# end

# def list_known_vulnerabilities(vulns_xml,system_xml)
#   boxes_with_known_vulnerabilities = []
  
#   vulns_xml.each { |v|
#     system_xml.each { |s|
#       if v[:vulnerability] == s[:vulnerability] 
#         boxes_with_known_vulnerabilities << s
#       break
#       end
#     }
#   }
#   return boxes_with_known_vulnerabilities
# end

# def list_there_known_networks(network_xml,system_xml)
#   boxes_with_known_networks = []
  
#   network_xml.each { |n|
#     system_xml.each { |s|

      
#       if s[:network].include?(n[:name])
#         puts 'test'
#         boxes_with_known_networks << s
#       break
#       end
#     }
#   }
#   return boxes_with_known_networks
# end

# # def create_solution(system_xml, base_xml, vulns_xml)

# #   bases = []
  
# #   puts system
# #   system_xml.each { |s|
# #     bases[s.number] = []
# #     base_xml.each { |b|
# #         bases[s.number][0] = []
# #         bases[s.number][1] = []
# #       if s.base == b.base
# #         bases[s.number][0] << b
# #       break
# #       else 
# #         bases[s.number][1] << s
# #      end
# #     }
# #   }
# # end

# require 'nokogiri'
# require 'tempfile'
# require 'fileutils'


# # class System
# #   attr_accessor :os, :base, :number, :vulnerability, :network
# # end

# # class Vulnerability
# #   attr_accessor :type, :puppet, :details
# # end

# # class Base
# #   attr_accessor :name, :os, :distro, :base
# # end

# # class Network
# #   attr_accessor :name, :range
# # end

# # systems = {}
# # bases = {}

# # class BaseManager
# #   @bases = []

# #   def self.is_known_base?(basename)
# #     @bases.each do |base|
# #       if base.name == basename
# #         return true
# #       end
# #     end
# #     return false
# #   end
# # end

# # class SystemManager
# #   @systems = []

# #   def self.list_systems_with_bases(is_known)
# #     sys_list = []
# #     @systems.each do |sys|
# #       known = BaseManager.is_known_base?(sys.base)
# #       if is_known ? known : not known
# #         sys_list << sys
# #       end
# #     end

# #     return sys_list
# #   end
# # end

# def read_systems_xml
#   systems = []

#   filename = "#{ROOT_DIR}/../../lib/xml/boxes.xml"
#     doc = Nokogiri::XML(File.open(filename))

#     doc.search('//systems/system').map do |s|
    
#       system = {}

#       system[:os] = s.at('@os').text
#       system[:base] = s.at('@basebox').text
#       system[:number] = s.at('@number').text
       
#       system[:vulnerability] = s.css('vulnerabilities vulnerability').collect do |v| 
#        { 'critical' => v['critical'], 'access' => v['access'] } 
#       end
#       system[:network] = s.css('networks network').collect { |n| n['name'] }

#     systems << system
#   end
#   return systems
# end

# def read_network_xml
#   networks = []

#   filename = "#{ROOT_DIR}/../../lib/xml/networks.xml"
#     doc = Nokogiri::XML(File.open(filename))

#     doc.search('//networks/network').map do |n|
    
#     network = {}
#     network[:name] = n.at('@name').text
#     network[:range] = n.at('@range').text

#     networks << network
#   end
#   return networks
# end



# def read_vulns_xml
#   vulnerabilities = []

#   filename = "#{ROOT_DIR}/../../lib/xml/vulns.xml"
#   doc = Nokogiri::XML(File.open(filename))

#   doc.search('//vulnerabilities/vulnerability').map do |v|

#   vulnerability = {}

#   vulnerability[:type] = v.at('@type').text
#   vulnerability[:puppet] = v.at('@puppet').text
#   vulnerability[:details] = v.at('@details').text

#   vulnerabilities << vulnerability
#   end
#   return vulnerabilities
# end

# def read_bases_xml
#   bases = []

#   filename = "#{ROOT_DIR}/../../lib/xml/bases.xml"
#   doc = Nokogiri::XML(File.open(filename))

#   doc.search('//bases/base').map do |b|

#   base = {}
#   base[:name] = b.at('@name').text 
#   base[:os] = b.at('@os').text
#   base[:distro] = b.at('@distro').text
#   base[:base] = b.at('@vagrantbase').text
#   bases << base
#   end
#   return bases
# end
